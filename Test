import re
import time
from ipaddress import ip_interface, ip_network
import pandas as pd
from netmiko import ConnectHandler
import telnetlib

# --- –£—Ç–∏–ª–∏—Ç—ã ---

def get_interface_block(config: str, interface: str) -> str:
    match = re.search(rf"interface {interface}.*?(?=^interface|\Z)", config, re.DOTALL | re.MULTILINE)
    return match.group(0) if match else ""

def is_interface_active(block: str) -> bool:
    return not re.search(r"^\s+shutdown\b", block, re.MULTILINE)

def match_ip_in_block(block: str, expected_ip: str) -> bool:
    expected = ip_interface(expected_ip)
    ip_pattern = rf"ip address {expected.ip}\s+{expected.netmask}"
    return re.search(ip_pattern, block) is not None

def ip_in_subnet(block: str, subnet: str) -> bool:
    net = ip_network(subnet, strict=False)
    match = re.search(r"ip address (\d+\.\d+\.\d+\.\d+)\s+(\d+\.\d+\.\d+\.\d+)", block)
    if not match:
        return False
    try:
        return ip_interface(f"{match.group(1)}/{match.group(2)}").network == net
    except ValueError:
        return False

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ ---

def check_exact_ip(config, interface, expected_ip):
    block = get_interface_block(config, interface)
    return block and is_interface_active(block) and match_ip_in_block(block, expected_ip)

def check_ip_in_subnet(config, interface, subnet):
    block = get_interface_block(config, interface)
    return block and is_interface_active(block) and ip_in_subnet(block, subnet)

def check_router_config(router: str, config: str) -> dict:
    checks = {
        "R1": {"Ethernet0/0": "173.14.203.1/24", "Ethernet0/1": "197.148.231.12/30"},
        "R2": {
            "Ethernet0/0": "197.148.231.0/30",
            "Ethernet0/1": "197.148.231.12/30",
            "Ethernet0/2": "197.148.231.4/30",
        },
        "R3": {
            "Ethernet0/0": "173.14.201.1/24",
            "Ethernet0/1": "197.148.231.8/30",
            "Ethernet0/2": "197.148.231.0/30",
        },
        "R4": {
            "Ethernet0/2": "173.14.202.1/24",
            "Ethernet0/0": "197.148.231.8/30",
            "Ethernet0/1": "197.148.231.4/30",
        },
    }
    results = {}
    for intf, addr in checks.get(router, {}).items():
        if "/24" in addr:
            results[intf] = check_exact_ip(config, intf, addr)
        else:
            results[intf] = check_ip_in_subnet(config, intf, addr)
    return results

def check_server_config(config: str) -> bool:
    block = get_interface_block(config, "Ethernet0/0")
    return block and is_interface_active(block) and match_ip_in_block(block, "173.14.201.100/24")

def check_static_addresses(config: str) -> bool:
    return "ip address dhcp" not in config

def get_running_config(host="192.168.4.4", port=0, router="", enable_password="\n"):
    device = {
        "device_type": "cisco_ios_telnet",
        "host": host,
        "port": port,
        "secret": enable_password,
        "global_delay_factor": 2
    }
    try:
        print(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {router}...")
        conn = ConnectHandler(**device)
        conn.write_channel("\n")
        time.sleep(1)
        if device["secret"]:
            conn.enable()
        if "(config)" not in conn.find_prompt():
            conn.config_mode()
        output = conn.send_command("do show running-config", delay_factor=2)
        with open(f"{router}_running_config.txt", "w") as f:
            f.write(output)
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {router}_running_config.txt")
        conn.disconnect()
        return output
    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞ {router}: {e}")

# --- –†–∞–±–æ—Ç–∞ —Å VPC ---

def parse_pnet_ports(file_path: str) -> dict:
    try:
        df = pd.read_html(file_path)[0]
        return dict(zip(df['Node Name'], df['Port']))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è XLS: {e}")
        return {}

def check_vpc_dhcp(host: str, port: int, expected_subnet: str) -> bool:
    try:
        with telnetlib.Telnet(host, port, timeout=5) as tn:
            tn.write(b"\n"); time.sleep(1)
            tn.write(b"ip dhcp\n"); time.sleep(8)
            output = tn.read_very_eager().decode(errors="ignore")
        if not re.search(r"D+ORA", output):
            return False
        match = re.search(r"IP\s+(\d+\.\d+\.\d+\.\d+)/\d+", output)
        if not match:
            return False
        return ip_interface(f"{match.group(1)}/24").ip in ip_network(expected_subnet)
    except Exception as e:
        print(f"‚ùå DHCP –æ—à–∏–±–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}: {e}")
        return False

def extract_ip_from_show_ip(output: str) -> str:
    match = re.search(r"\bIP/MASK\s+GATEWAY.*\n.*?(\d+\.\d+\.\d+\.\d+)/\d+", output)
    if not match:
        raise ValueError("IP –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ show ip all")
    return match.group(1)

def ping_test(host: str, port: int, targets: list[str]) -> dict:
    results = {}
    try:
        with telnetlib.Telnet(host, port, timeout=5) as tn:
            tn.write(b"\n"); time.sleep(1)
            tn.write(b"show ip all\n"); time.sleep(1)
            output = tn.read_very_eager().decode(errors="ignore")
            my_ip = extract_ip_from_show_ip(output)
            print(f"üîé IP {my_ip}")

            for target in targets:
                tn.write(f"ping {target}\n".encode())
                time.sleep(4)
                response = tn.read_very_eager().decode(errors="ignore")
                results[target] = "unreachable" not in response.lower() and "timeout" not in response.lower()
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞ —Å –ø–æ—Ä—Ç–∞ {port}: {e}")
        for t in targets:
            results[t] = False
    return results


if __name__ == '__main__':
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç—ã
        ports = parse_pnet_ports("node_sessions.xls")
        print("‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ä—Ç—ã:", ports)

        # 2. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å get_running_config
        for router, port in ports.items():
            print(f"\nüîß –ü–æ–ª—É—á–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é {router} (–ø–æ—Ä—Ç {port})...")
            config = get_running_config(port=port, router=router)
            print(config)
    except ValueError as e:
        print(f"üö® –û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

    print("–ó–∞–¥–∞–Ω–∏–µ 1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å IP –∞–¥—Ä–µ—Å–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–æ–≤")

    for router in ["R1", "R2", "R3", "R4"]:
        try:
            with open(f"{router}_running_config.txt", "r") as f:
                config = f.read()

            checks = check_router_config(router, config)
            print(f"\n{router} –ø—Ä–æ–≤–µ—Ä–∫–∞:")
            for interface, status in checks.items():
                print(f"{interface}: {'‚úÖ' if status else '‚ùå'}")

        except FileNotFoundError:
            print(f"‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {router} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    print("\n–ó–∞–¥–∞–Ω–∏–µ 2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞")

    if "SRV" in ports:
        try:
            with open("SRV_running_config.txt", "r") as f:
                srv_config = f.read()

            if check_server_config(srv_config):
                print("SRV: ‚úÖ –ê–¥—Ä–µ—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            else:
                print("SRV: ‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Ethernet0/0")
        except FileNotFoundError:
            print("‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ SRV –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ö†Ô∏è –£–∑–µ–ª SRV –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ node_sessions.xls")

    print("\n–ó–∞–¥–∞–Ω–∏–µ 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP –ø–æ DHCP –Ω–∞ VPC-—Ö–æ—Å—Ç–∞—Ö")

    vpc_targets = {
        "VPC-Samara": "173.14.201.0/24",
        "VPC-Izhevsk": "173.14.202.0/24",
        "VPC-Kazan": "173.14.203.0/24"
    }

    for vpc_name, subnet in vpc_targets.items():
        if vpc_name in ports:
            print(f"\nüîÑ –ü—Ä–æ–≤–µ—Ä—è—é {vpc_name}...")
            success = check_vpc_dhcp("192.168.4.4", ports[vpc_name], subnet)
            print(f"{vpc_name}: {'‚úÖ –ü–æ–ª—É—á–µ–Ω IP –∏–∑ –Ω—É–∂–Ω–æ–π –ø–æ–¥—Å–µ—Ç–∏' if success else '‚ùå –û—à–∏–±–∫–∞ DHCP –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π IP'}")
        else:
            print(f"{vpc_name}: ‚ö†Ô∏è –ü–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ node_sessions.xls")

    print("\n–ó–∞–¥–∞–Ω–∏–µ 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–æ–≤ –º–µ–∂–¥—É VPC")

    ip_map = {}
    host = '192.168.4.4'
    for vpc in ["VPC-Izhevsk", "VPC-Kazan", "VPC-Samara"]:
        if vpc in ports:
            try:
                with telnetlib.Telnet(host, ports[vpc], timeout=5) as tn:
                    tn.write(b"\n")
                    time.sleep(1)
                    tn.write(b"show ip all\n")
                    time.sleep(1)
                    output = tn.read_very_eager().decode(errors="ignore")
                    ip_map[vpc] = extract_ip_from_show_ip(output)
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP –¥–ª—è {vpc}: {e}")
                ip_map[vpc] = None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å VPC-Samara
    if ports.get("VPC-Samara"):
        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å VPC-Samara:")
        result = ping_test(host, ports["VPC-Samara"], [
            ip_map.get("VPC-Izhevsk"),
            ip_map.get("VPC-Kazan")
        ])
        for target, status in result.items():
            print(f"–ü–∏–Ω–≥ –¥–æ {target}: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if status else '‚ùå –û—à–∏–±–∫–∞'}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å VPC-Izhevsk
    if ports.get("VPC-Izhevsk"):
        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å VPC-Izhevsk:")
        result = ping_test(host, ports["VPC-Izhevsk"], [
            ip_map.get("VPC-Kazan")
        ])
        for target, status in result.items():
            print(f"–ü–∏–Ω–≥ –¥–æ {target}: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if status else '‚ùå –û—à–∏–±–∫–∞'}")
