import re
import time
from ipaddress import ip_interface, ip_network
import pandas as pd
from netmiko import ConnectHandler
import telnetlib

def get_running_config(
        host: str = "192.168.4.4",
        router: str = "",
        port: int = 0,
        username: str = "",
        password: str = "",  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–æ
        enable_password: str = "\n",  # Enter –¥–ª—è enable (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
        save_to_file: bool = True,  # –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ –∫–æ–Ω—Ñ–∏–≥ –≤ —Ñ–∞–π–ª?
        verbose: bool = True  # –í—ã–≤–æ–¥–∏—Ç—å –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å?
):
    global connection
    device = {
        "device_type": "cisco_ios_telnet",  # –í–∞–∂–Ω–æ: —É–∫–∞–∑—ã–≤–∞–µ–º Telnet!
        "host": host,  # –ê–¥—Ä–µ—Å PNET Lab
        "port": port,  # Telnet-–ø–æ—Ä—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, R1)
        "secret": enable_password,  # –ü–∞—Ä–æ–ª—å enable (–µ—Å–ª–∏ –µ—Å—Ç—å)
        "global_delay_factor": 2  # –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
    }

    try:
        # 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print("üîå –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É...")
        connection = ConnectHandler(**device)

        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "\n" (–µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ "—Å–ø–∏—Ç")
        connection.write_channel("\n")
        time.sleep(1)

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ enable-—Ä–µ–∂–∏–º
        if device["secret"]:
            connection.enable()

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –≤ config mode)
        prompt = connection.find_prompt()
        if "(config)" in prompt:
            print("‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ configure terminal!")
        else:
            print("‚åõ –ü–µ—Ä–µ—Ö–æ–¥ –≤ 'configure terminal'...")
            connection.config_mode()  # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –≤ conf t

        # 5. –í—ã–ø–æ–ª–Ω—è–µ–º "do show running-config"
        print("üîç –í—ã–ø–æ–ª–Ω—è—é 'do show running-config'...")
        output = connection.send_command("do show running-config", delay_factor=2)

        # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open(f"{router}_running_config.txt", "w") as f:
            f.write(output)
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {router}_running_config.txt")

        # 7. –í—ã—Ö–æ–¥–∏–º –∏–∑ config mode (–µ—Å–ª–∏ –±—ã–ª–∏ –≤–Ω—É—Ç—Ä–∏)
        if "(config)" in connection.find_prompt():
            connection.exit_config_mode()

    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞: {e}")

    finally:
        if "connection" in locals():
            connection.disconnect()
            print("üîí –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞.")


def check_router_config(router: str, config: str) -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–æ—É—Ç–µ—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–æ–ø–æ–ª–æ–≥–∏–∏
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
    """
    results = {}

    # –°—Ç—Ä–æ–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
    strict_checks = {
        "R1": {"Ethernet0/0": "173.14.203.1/24"},
        "R3": {"Ethernet0/0": "173.14.201.1/24"},
        "R4": {"Ethernet0/2": "173.14.202.1/24"}
    }

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–≥–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    if router in strict_checks:
        for interface, expected_ip in strict_checks[router].items():
            results[interface] = check_exact_ip(config, interface, expected_ip)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–æ–ø–æ–ª–æ–≥–∏–∏
    if router == "R1":
        results["Ethernet0/1"] = check_ip_in_subnet(config, "Ethernet0/1", "197.148.231.12/30")

    elif router == "R2":
        results["Ethernet0/0"] = check_ip_in_subnet(config, "Ethernet0/0", "197.148.231.0/30")
        results["Ethernet0/1"] = check_ip_in_subnet(config, "Ethernet0/1", "197.148.231.12/30")
        results["Ethernet0/2"] = check_ip_in_subnet(config, "Ethernet0/2", "197.148.231.4/30")

    elif router == "R3":
        results["Ethernet0/1"] = check_ip_in_subnet(config, "Ethernet0/1", "197.148.231.8/30")
        results["Ethernet0/2"] = check_ip_in_subnet(config, "Ethernet0/2", "197.148.231.0/30")

    elif router == "R4":
        results["Ethernet0/0"] = check_ip_in_subnet(config, "Ethernet0/0", "197.148.231.8/30")
        results["Ethernet0/1"] = check_ip_in_subnet(config, "Ethernet0/1", "197.148.231.4/30")

    return results


def check_exact_ip(config: str, interface: str, expected_ip: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ IP –Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –∏ –µ–≥–æ —Å—Ç–∞—Ç—É—Å (shutdown)
    """
    expected = ip_interface(expected_ip)
    # –ò—â–µ–º –±–ª–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    pattern = rf"interface {interface}.*?(?=^interface|\Z)"
    match = re.search(pattern, config, re.DOTALL | re.MULTILINE)
    if not match:
        return False

    interface_block = match.group(0)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ shutdown –≤ –±–ª–æ–∫–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    if re.search(r"^\s+shutdown\b", interface_block, re.MULTILINE):
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–π IP-–∞–¥—Ä–µ—Å
    ip_pattern = rf"ip address {expected.ip}\s+{expected.netmask}"
    return bool(re.search(ip_pattern, interface_block))


def check_ip_in_subnet(config: str, interface: str, subnet: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ –µ—Å—Ç—å –ª—é–±–æ–π IP –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–¥—Å–µ—Ç–∏ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –≤—ã–∫–ª—é—á–µ–Ω
    """
    network = ip_network(subnet, strict=False)
    # –ò—â–µ–º –±–ª–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    pattern = rf"interface {interface}.*?(?=^interface|\Z)"
    match = re.search(pattern, config, re.DOTALL | re.MULTILINE)
    if not match:
        return False

    interface_block = match.group(0)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ shutdown –≤ –±–ª–æ–∫–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    if re.search(r"^\s+shutdown\b", interface_block, re.MULTILINE):
        return False

    # –ò—â–µ–º IP-–∞–¥—Ä–µ—Å –≤ –±–ª–æ–∫–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    ip_pattern = r"ip address (\d+\.\d+\.\d+\.\d+)\s+(\d+\.\d+\.\d+\.\d+)"
    ip_match = re.search(ip_pattern, interface_block)
    if not ip_match:
        return False

    ip = ip_match.group(1)
    mask = ip_match.group(2)

    try:
        interface_ip = ip_interface(f"{ip}/{mask}")
        return interface_ip.network == network
    except ValueError:
        return False


def check_static_addresses(config: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–µ—Ç DHCP –Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö
    """
    return "ip address dhcp" not in config


def parse_pnet_ports(file_path: str) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ä—Ç—ã –≤—Å–µ—Ö —É–∑–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ PNET Lab
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {'R1': 30812, 'R2': 30813, ..., 'SRV': 30820}
    """
    try:
        df = pd.read_html(file_path)[0]
        df = df[df['Node Name'].notna()]
        return dict(zip(df['Node Name'], df['Port']))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return {}

def check_server_config(config: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å e0/0 –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ SRV –≤–∫–ª—é—á–µ–Ω –∏ –∏–º–µ–µ—Ç IP 173.14.231.100/24
    """
    expected = ip_interface("173.14.201.100/24")
    pattern = rf"interface Ethernet0/0.*?(?=^interface|\Z)"
    match = re.search(pattern, config, re.DOTALL | re.MULTILINE)
    if not match:
        return False

    block = match.group(0)
    if re.search(r"^\s+shutdown\b", block, re.MULTILINE):
        return False

    ip_pattern = rf"ip address {expected.ip}\s+{expected.netmask}"
    return bool(re.search(ip_pattern, block))

def check_vpc_dhcp(host: str, port: int, expected_subnet: str) -> bool:
    try:
        with telnetlib.Telnet(host, port, timeout=5) as tn:
            time.sleep(1)
            tn.write(b"\n")
            time.sleep(1)
            tn.write(b"ip dhcp\n")
            time.sleep(10)
            output = tn.read_very_eager().decode(errors="ignore")
            print(output)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ DORA / DDORA / DDDORA
        if not re.search(r"D+ORA", output):
            return False

        # –ü–æ–∏—Å–∫ IP
        match = re.search(r"IP\s+(\d+\.\d+\.\d+\.\d+)/\d+", output)
        if not match:
            return False

        ip = match.group(1)
        return ip_interface(f"{ip}/24").ip in ip_network(expected_subnet)

    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VPC ({port}): {e}")
        return False

def get_vpc_ip(host: str, port: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π IP –∞–¥—Ä–µ—Å VPC —á–µ—Ä–µ–∑ show ip all"""
    try:
        with telnetlib.Telnet(host, port, timeout=5) as tn:
            time.sleep(1)
            tn.write(b"\n")
            time.sleep(1)
            tn.write(b"show ip all\n")
            time.sleep(2)
            output = tn.read_very_eager().decode(errors="ignore")
            match = re.search(r"IP/MASK\s+([0-9.]+)", output)
            if match:
                return match.group(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IP VPC ({port}): {e}")
    return None


def ping_vpc(host: str, port: int, target_ip: str) -> bool:
    """–ü–∏–Ω–≥—É–µ—Ç –¥—Ä—É–≥–æ–π IP –∞–¥—Ä–µ—Å –∏–∑ VPC"""
    try:
        with telnetlib.Telnet(host, port, timeout=5) as tn:
            time.sleep(1)
            tn.write(b"\n")
            time.sleep(1)
            command = f"ping {target_ip}\n".encode()
            tn.write(command)
            time.sleep(4)
            output = tn.read_very_eager().decode(errors="ignore")
            return "ttl=" in output.lower() or "icmp_seq=" in output.lower()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞ —Å VPC ({port}): {e}")
    return False


def extract_ip_from_show_ip(output: str) -> str:
    """
    –ü–∞—Ä—Å–∏—Ç –≤—ã–≤–æ–¥ show ip all –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç IP-–∞–¥—Ä–µ—Å
    """
    match = re.search(r"\bIP/MASK\s+GATEWAY.*\n.*?(\d+\.\d+\.\d+\.\d+)/\d+", output)
    if match:
        return match.group(1)
    else:
        raise ValueError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ IP –≤ –≤—ã–≤–æ–¥–µ –∫–æ–º–∞–Ω–¥—ã show ip all")

def ping_test(host: str, port: int, targets: list[str]) -> dict:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–∏–Ω–≥ —Å VPC-—Ö–æ—Å—Ç–∞ –¥–æ —Å–ø–∏—Å–∫–∞ IP-–∞–¥—Ä–µ—Å–æ–≤
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ –∫–∞–∂–¥–æ–º—É IP
    """
    results = {}
    try:
        with telnetlib.Telnet(host, port, timeout=5) as tn:
            time.sleep(1)
            tn.write(b"\n")
            time.sleep(1)
            tn.write(b"show ip all\n")
            time.sleep(1)
            output = tn.read_very_eager().decode(errors="ignore")
            print(f"üîé –í—ã–≤–æ–¥ show ip all:\n{output}")
            my_ip = extract_ip_from_show_ip(output)
            print(f"üß† –ú–æ–π IP: {my_ip}")

            for target_ip in targets:
                tn.write(f"ping {target_ip}\n".encode())
                time.sleep(5)
                ping_output = tn.read_very_eager().decode(errors="ignore")
                print(f"üì° –ü–∏–Ω–≥ {target_ip}:\n{ping_output}")
                if ("unreachable" in ping_output.lower() or
                    "timeout" in ping_output.lower()):
                    results[target_ip] = False
                else:
                    results[target_ip] = True
    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∏–Ω–≥–µ —Å –ø–æ—Ä—Ç–∞ {port}: {e}")
        for ip in targets:
            results[ip] = False
    return results




if __name__ == '__main__':
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç—ã
        ports = parse_pnet_ports("node_sessions.xls")
        print("‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ä—Ç—ã:", ports)

        # 2. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å get_running_config
        for router, port in ports.items():
            print(f"\nüîß –ü–æ–ª—É—á–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é {router} (–ø–æ—Ä—Ç {port})...")
            config = get_running_config(port=port, router=router)
            print(config)
    except ValueError as e:
        print(f"üö® –û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

    print("–ó–∞–¥–∞–Ω–∏–µ 1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å IP –∞–¥—Ä–µ—Å–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–æ–≤")

    for router in ["R1", "R2", "R3", "R4"]:
        try:
            with open(f"{router}_running_config.txt", "r") as f:
                config = f.read()

            checks = check_router_config(router, config)
            print(f"\n{router} –ø—Ä–æ–≤–µ—Ä–∫–∞:")
            for interface, status in checks.items():
                print(f"{interface}: {'‚úÖ' if status else '‚ùå'}")

        except FileNotFoundError:
            print(f"‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {router} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    print("\n–ó–∞–¥–∞–Ω–∏–µ 2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞")

    if "SRV" in ports:
        try:
            with open("SRV_running_config.txt", "r") as f:
                srv_config = f.read()

            if check_server_config(srv_config):
                print("SRV: ‚úÖ –ê–¥—Ä–µ—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            else:
                print("SRV: ‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Ethernet0/0")
        except FileNotFoundError:
            print("‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ SRV –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ö†Ô∏è –£–∑–µ–ª SRV –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ node_sessions.xls")

    print("\n–ó–∞–¥–∞–Ω–∏–µ 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP –ø–æ DHCP –Ω–∞ VPC-—Ö–æ—Å—Ç–∞—Ö")

    vpc_targets = {
        "VPC-Samara": "173.14.201.0/24",
        "VPC-Izhevsk": "173.14.202.0/24",
        "VPC-Kazan": "173.14.203.0/24"
    }

    for vpc_name, subnet in vpc_targets.items():
        if vpc_name in ports:
            print(f"\nüîÑ –ü—Ä–æ–≤–µ—Ä—è—é {vpc_name}...")
            success = check_vpc_dhcp("192.168.4.4", ports[vpc_name], subnet)
            print(f"{vpc_name}: {'‚úÖ –ü–æ–ª—É—á–µ–Ω IP –∏–∑ –Ω—É–∂–Ω–æ–π –ø–æ–¥—Å–µ—Ç–∏' if success else '‚ùå –û—à–∏–±–∫–∞ DHCP –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π IP'}")
        else:
            print(f"{vpc_name}: ‚ö†Ô∏è –ü–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ node_sessions.xls")

    print("\n–ó–∞–¥–∞–Ω–∏–µ 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–æ–≤ –º–µ–∂–¥—É VPC")

    ip_map = {}
    host = '192.168.4.4'
    for vpc in ["VPC-Izhevsk", "VPC-Kazan", "VPC-Samara"]:
        if vpc in ports:
            try:
                with telnetlib.Telnet(host, ports[vpc], timeout=5) as tn:
                    tn.write(b"\n")
                    time.sleep(1)
                    tn.write(b"show ip all\n")
                    time.sleep(1)
                    output = tn.read_very_eager().decode(errors="ignore")
                    ip_map[vpc] = extract_ip_from_show_ip(output)
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP –¥–ª—è {vpc}: {e}")
                ip_map[vpc] = None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å VPC-Samara
    if ports.get("VPC-Samara"):
        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å VPC-Samara:")
        result = ping_test(host, ports["VPC-Samara"], [
            ip_map.get("VPC-Izhevsk"),
            ip_map.get("VPC-Kazan")
        ])
        for target, status in result.items():
            print(f"–ü–∏–Ω–≥ –¥–æ {target}: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if status else '‚ùå –û—à–∏–±–∫–∞'}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å VPC-Izhevsk
    if ports.get("VPC-Izhevsk"):
        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å VPC-Izhevsk:")
        result = ping_test(host, ports["VPC-Izhevsk"], [
            ip_map.get("VPC-Kazan")
        ])
        for target, status in result.items():
            print(f"–ü–∏–Ω–≥ –¥–æ {target}: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if status else '‚ùå –û—à–∏–±–∫–∞'}")
